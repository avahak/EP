https://stackoverflow.com/questions/26049303/how-to-compare-two-json-have-the-same-properties-without-order

- SSE: https://medium.com/tokopedia-engineering/implementing-server-sent-events-in-reactjs-c36661d89468


- await new Promise(r => setTimeout(r, 1000));

- useEffect, etc. compare values in a shallow way so using complex objects as
  dependencies can lead to unintended activations. Use https://lodash.com/docs/4.17.15
  IsEqual or some other deep comparison or JSON.stringify to transform the object 
  into a string (INEFFICIENT!).

- VSC uses tsconfig.json so all files should be included in this base configuration
  "include": ["src"]

Azure
  - For some reason Node 20 does not work on Azure, use Node 18
  - Remember to have PORT environment variable defined on Azure
  - Use docker logs to identify problems (Advanced Tools -> Current Docker logs)

Links:

https://www.youtube.com/watch?v=IcBzsP-fvPo&ab_channel=RichRadke

JSFeat sample code (needed):
view-source:https://inspirit.github.io/jsfeat/sample_orb.html

article on homography with tracking.js, JSFeat:
https://hub.packtpub.com/object-detection-using-image-features-javascript/

Sudoku solver (opencv):
https://www.youtube.com/watch?v=O6WfZRyatcY&ab_channel=Murtaza%27sWorkshop-RoboticsandAI

- Note! All crossings of orthogonal lines look the same so brute force matching 
  will generate false matches. However, most of these false matches get weeded 
  out by enforcing symmetric matching.

- Use // @ts-ignore to suppress typescript warnings

- Implement process to prevent multiple create_access_token calls:
  (NOTE! needs more bookkeeping so that same promise is not used if auth state changes)
  class AuthenticationState {
      private tokenRenewalPromise: Promise<string | null> | null = null;

      async renewAccessToken(): Promise<string | null> {
          if (!this.tokenRenewalPromise) {
              this.tokenRenewalPromise = this.doRenewAccessToken();
              this.tokenRenewalPromise.finally(() => {
                  this.tokenRenewalPromise = null; // Reset after it completes
              });
          }
          return this.tokenRenewalPromise;
      }

      private async doRenewAccessToken(): Promise<string | null> {
          // Your actual token renewal logic here
          // Example: return fetchTokenFromServer();
          return "newAccessToken"; // Replace with actual implementation
      }
  }